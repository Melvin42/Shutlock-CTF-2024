#!/usr/bin/python3
from Crypto.Util.number import long_to_bytes, inverse

ct = 1956102418414964906766658672182038815675149984030160103435546349665029187075809316386742648953476377810230820926464585430398082369745419308135508036729519616949456707646306887308625434960968781475049735624264457409003612848912022836541883235847630663370486482983561063032050190503386140061662486754033680728377314944473870208691356431289118484558856727284234221587639135094976893779817402919870873884217649622688035164956432631838449152966315588753903077306493124036203282029402547451707864762925699469684826007392760137256186629939254660739541848371734904434274667096237665962949204422260745667834399854207891024585329256239287328369954962521140074147071190857231944285570745990291240616710804415678838680210106685517813982525635414266538209916191758297576672215291360346015397575906671703499055916044003173911298137838089401546011477605724936788734756607149122074913483340260020750153635731020565794637000515364741593543969869917899614330898688965854869431262163914840158256876000048054025869637443623061421761207154913212951872740555949280914878030627430460645856378733564290490413458318097820527836724226045031812170628860331877302460685956136295507545313105593869300747547809890843890810828921863952787419807122438953105522715978814086587079659955633528729847103494641769473622940607276213847144124754408371950706033468964947873684667507800619701386504570864553198797129386572364386214641237881940300433091144950366971487075475393400892069381407853025427618080511884088822714215376503568968379791693328105000920306621301025742762442135377887509760560224612346868743344119498370726437259836069194241611912017537080352058030236603068210720471502864537815813098895845252100395590680098101845420542028840764926005686487463133212451692679306227781577596857882758524440685913237797299271268573788281339308108362639226826883472460408058243304117373280

N = 28428857216862425537130452151809638870585201670440164102774168551896218168100205152213633573335606074795950860936909761402025302482066629397181332127874781690107447890279245112395465531938896423274141395360970262704909779167707018589864357817791111213511271840213378511697718074294165859260971172362609290267485849180084904144940748838393921567401600509592635494874382276417008507673823115081671490042092401569971784714967754290257908911145643542500664102146986592554079834901704394892228783633537076912827137326016891834541594104590611698329358410180979245308478259684200551881351034920514373465563462262219191109790203460165871292890029611686795983472651706496896708288622799685284969817346594165081394836720312802053906482653335188871524135555965521347733838586799444619975997126635176896822546664055308848906907384220440529267844749468207608219540832563592523885237568126706568904590610958351502694878089108277911322513996903105604902852498591979851180731679198143718895973813645382345414426261342547487976926342117725328701542373558529870071453952984975139795599388332837790987927966786647201647081648767522374408752689623804605548173595865331151515055262078104974191260532013045182910745813454609789595402322479314024608001667583000105169658045969237109182115432457370199124538176994674863262337537731691968390386238249911057352779383345395780506008542930620184286063488726139693567491606241728521201377992519675761699452143101934602981043194413960672140443070359150905632521962729008008652320162317816543545312652928649090211131748984065891692321598405282482168127269279329156322181977514831960300649952552040775677883377955074187731754723766837258163128143854068646865612030995519351076041336269318717559718224917649673945662811457984468011160484668706315323524626165133502946484599260548635667662652902616856589377193341077542713934854149321

e = 65537

def int_cubic_root(n):
    low = 0
    high = n
    while low < high:
        mid = (low + high) // 2
        if mid**3 < n:
            low = mid + 1
        else:
            high = mid
    return low

def recover_p(N, e, ct):
    p = int_cubic_root(N)

    phi_N = (p ** 3) - (p ** 2)
    d = inverse(e, phi_N)
    pt = pow(ct, d, N)
    return pt

pt = recover_p(N, e, ct)

plaintext = long_to_bytes(pt).decode()
print(f"Le plaintext récupéré est: {plaintext}")
